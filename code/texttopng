#!/usr/bin/env python
# $URL$
# $Rev$
# Script to renders text as a PNG image.

from array import array
import itertools

font8x8 = { 32: '0000000000000000',   33: '0010101010001000',   34: '0028280000000000',   35: '0000287c287c2800',   36: '00103c5038147810',   37: '0000644810244c00',   38: '0020502054483400',   39: '0010100000000000',   40: '0008101010101008',   41: '0020101010101020',   42: '0010543838541000',   43: '000010107c101000',   44: '0000000000301020',   45: '000000007c000000',   46: '0000000000303000',   47: '0000040810204000',   48: '0038445454443800',   49: '0008180808080800',   50: '0038043840407c00',   51: '003c041804043800',   52: '00081828487c0800',   53: '0078407804047800',   54: '0038407844443800',   55: '007c040810101000',   56: '0038443844443800',   57: '0038443c04040400',   58: '0000303000303000',   59: '0000303000301020',   60: '0004081020100804',   61: '0000007c007c0000',   62: '0040201008102040',   63: '0038440810001000',   64: '00384c545c403800',   65: '0038447c44444400',   66: '0078447844447800',   67: '0038444040443800',   68: '0070484444487000',   69: '007c407840407c00',   70: '007c407840404000',   71: '003844405c443c00',   72: '0044447c44444400',   73: '0038101010103800',   74: '003c040404443800',   75: '0044487048444400',   76: '0040404040407c00',   77: '006c545444444400',   78: '004464544c444400',   79: '0038444444443800',   80: '0078447840404000',   81: '0038444444443c02',   82: '0078447844444400',   83: '0038403804047800',   84: '007c101010101000',   85: '0044444444443c00',   86: '0044444444281000',   87: '0044445454543800',   88: '0042241818244200',   89: '0044443810101000',   90: '007c081020407c00',   91: '0038202020202038',   92: '0000402010080400',   93: '0038080808080838',   94: '0010284400000000',   95: '000000000000fe00',   96: '0040200000000000',   97: '000038043c443c00',   98: '0040784444447800',   99: '0000384040403800',   100: '00043c4444443c00',   101: '000038447c403c00',   102: '0018203820202000',   103: '00003c44443c0438',   104: '0040784444444400',   105: '0010003010101000',   106: '0010003010101020',   107: '0040404870484400',   108: '0030101010101000',   109: '0000385454444400',   110: '0000784444444400',   111: '0000384444443800',   112: '0000784444784040',   113: '00003c44443c0406',   114: '00001c2020202000',   115: '00003c4038047800',   116: '0020203820201800',   117: '0000444444443c00',   118: '0000444444281000',   119: '0000444454543800',   120: '0000442810284400',   121: '00004444443c0438',   122: '00007c0810207c00',   123: '0018202060202018',   124: '0010101000101010',   125: '003008080c080830',   126: '0020540800000000' }

# Subset of GNU Unifont
# created by Roman Czyborra
# http://czyborra.com/unifont/
font8x16 = {32: '00000000000000000000000000000000', 33: '00000000080808080808080008080000', 34: '00002222222200000000000000000000', 35: '000000001212127E24247E4848480000', 36: '00000000083E4948380E09493E080000', 37: '00000000314A4A340808162929460000', 38: '000000001C2222221C39454246390000', 39: '00000808080800000000000000000000', 40: '00000004080810101010101008080400', 41: '00000020101008080808080810102000', 42: '00000000000008492A1C2A4908000000', 43: '0000000000000808087F080808000000', 44: '00000000000000000000000018080810', 45: '0000000000000000007E000000000000', 46: '00000000000000000000000018180000', 47: '00000000020204080810102040400000', 48: '00000000182442424242424224180000', 49: '000000000818280808080808083E0000', 50: '000000003C4242020C102040407E0000', 51: '000000003C4242021C020242423C0000', 52: '00000000040C142444447E0404040000', 53: '000000007E4040407C020202423C0000', 54: '000000001C2040407C424242423C0000', 55: '000000007E0202040404080808080000', 56: '000000003C4242423C424242423C0000', 57: '000000003C4242423E02020204380000', 58: '00000000000018180000001818000000', 59: '00000000000018180000001808081000', 60: '00000000000204081020100804020000', 61: '000000000000007E0000007E00000000', 62: '00000000004020100804081020400000', 63: '000000003C4242020408080008080000', 64: '000000001C224A565252524E201E0000', 65: '0000000018242442427E424242420000', 66: '000000007C4242427C424242427C0000', 67: '000000003C42424040404042423C0000', 68: '00000000784442424242424244780000', 69: '000000007E4040407C404040407E0000', 70: '000000007E4040407C40404040400000', 71: '000000003C424240404E4242463A0000', 72: '00000000424242427E42424242420000', 73: '000000003E08080808080808083E0000', 74: '000000001F0404040404044444380000', 75: '00000000424448506060504844420000', 76: '000000004040404040404040407E0000', 77: '00000000424266665A5A424242420000', 78: '0000000042626252524A4A4646420000', 79: '000000003C42424242424242423C0000', 80: '000000007C4242427C40404040400000', 81: '000000003C4242424242425A663C0300', 82: '000000007C4242427C48444442420000', 83: '000000003C424240300C0242423C0000', 84: '000000007F0808080808080808080000', 85: '000000004242424242424242423C0000', 86: '00000000414141222222141408080000', 87: '00000000424242425A5A666642420000', 88: '00000000424224241818242442420000', 89: '00000000414122221408080808080000', 90: '000000007E02020408102040407E0000', 91: '0000000E080808080808080808080E00', 92: '00000000404020101008080402020000', 93: '00000070101010101010101010107000', 94: '00001824420000000000000000000000', 95: '00000000000000000000000000007F00', 96: '00201008000000000000000000000000', 97: '0000000000003C42023E4242463A0000', 98: '0000004040405C6242424242625C0000', 99: '0000000000003C4240404040423C0000', 100: '0000000202023A4642424242463A0000', 101: '0000000000003C42427E4040423C0000', 102: '0000000C1010107C1010101010100000', 103: '0000000000023A44444438203C42423C', 104: '0000004040405C624242424242420000', 105: '000000080800180808080808083E0000', 106: '0000000404000C040404040404044830', 107: '00000000404044485060504844420000', 108: '000000001808080808080808083E0000', 109: '00000000000076494949494949490000', 110: '0000000000005C624242424242420000', 111: '0000000000003C4242424242423C0000', 112: '0000000000005C6242424242625C4040', 113: '0000000000003A4642424242463A0202', 114: '0000000000005C624240404040400000', 115: '0000000000003C4240300C02423C0000', 116: '0000000010107C1010101010100C0000', 117: '000000000000424242424242463A0000', 118: '00000000000042424224242418180000', 119: '00000000000041494949494949360000', 120: '00000000000042422418182442420000', 121: '0000000000004242424242261A02023C', 122: '0000000000007E0204081020407E0000', 123: '0000000C101008081010080810100C00', 124: '00000808080808080808080808080808', 125: '00000030080810100808101008083000', 126: '00000031494600000000000000000000' }


def char(i):
    """Get image data for the character `i` (a one character string).
    Returned as a list of rows.  Each row is a tuple containing the
    packed pixels.
    """
    i = ord(i)
    if i not in font8x8:
        return [(0,)]*8
    return map(lambda row: (ord(row),), font8x8[i].decode('hex'))


def texttoraster(m, height=8):
    """Convert string *m* to a raster image (by rendering it using the
    font in *font*).  A triple of (*width*, *height*, *pixels*) is
    returned; *pixels* is in boxed row packed pixel format.
    """
    # Assumes monospaced font.
    x = 8*len(m)
    y = height
    return x,y,itertools.imap(lambda row: itertools.chain(*row),
                              zip(*map(char, m)))


def render(message, out):
    import png
    x,y,pixels = texttoraster(message, 8)
    w = png.Writer(x, y, greyscale=True, bitdepth=1)
    w.write_packed(out, pixels)
    out.flush()


def main(argv=None):
    import sys
    if argv is None:
        argv = sys.argv
    if len(argv) > 1:
        message = argv[1]
    else:
        message = sys.stdin.read()
    render(message, sys.stdout)


if __name__ == '__main__':
    main()
