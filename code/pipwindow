#!/usr/bin/env python

import argparse

import png

# pipwindow

"""Tool to crop/expand an image to a rectangular window.
Come the revolution
this tool will allow the image and the window to be placed arbitrarily
(in particular the window can be bigger than the picture
and/or overlap it only partially) and
the image can be OpenGL style # border/repeat effects
(repeat, mirrored repeat, clamp,
fixed background colour, background colour from source file).
For now this tool only crops.
The window must be no greater than the image in
both x and y.
Coordinates are with (0,0) being the top-left
(as in ImageMagick).
"""


def copy_window(tl, br, inp, out):
    """Place a window onto the image and cut-out the resulting rectangle.
    The window is an axis aligned rectangle with opposite corners
    at *tl* and *br* (each being an (x,y) pair).
    *inp* is the input file (a PNG image).
    *out* is the output file.
    """

    r = png.Reader(file=inp)
    _, _, rows, info = r.asDirect()

    out_rows, out_info = window(rows, info, tl, br)

    w = png.Writer(**out_info)
    w.write(out, out_rows)


def window(rows, info, tl, br):
    """*rows* and *info* are the rows and info object for
    a PNG image as might be returned by png.asDirect().
    A new *rows* and *info* are returned that represent
    a windowed image.
    The window is an axis aligned rectangle with opposite corners
    at *tl* and *br* (each being an (x,y) pair).
    """

    width, height = info["size"]

    left, top = tl
    right, bottom = br

    if top is None:
        top = 0
    if left is None:
        left = 0
    if bottom is None:
        bottom = height
    if right is None:
        right = width

    if not (0 <= left < right <= width):
        raise NotImplementedError()
    if not (0 <= top < bottom <= height):
        raise NotImplementedError()
    # Compute left and right index bounds for each row,
    # given that each row is a flat row of values.
    l = left * info["planes"]
    r = right * info["planes"]

    def itercrop():
        """An iterator to perform the crop."""

        for i, row in enumerate(rows):
            if i < top:
                continue
            if i >= bottom:
                # Same as "raise StopIteration"
                return
            yield row[l:r]

    info = dict(info, size=(right - left, bottom - top))
    return itercrop(), info


def main(argv=None):
    import sys

    if argv is None:
        argv = sys.argv
    argv = argv[1:]

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--top", type=int)
    parser.add_argument("--left", type=int)
    parser.add_argument("--bottom", type=int)
    parser.add_argument("--right", type=int)
    parser.add_argument(
        "input", nargs="?", default="-", type=png.cli_open, metavar="PNG"
    )

    args = parser.parse_args(argv)

    return copy_window(
        (args.left, args.top),
        (args.right, args.bottom),
        args.input,
        png.binary_stdout(),
    )


if __name__ == "__main__":
    main()
